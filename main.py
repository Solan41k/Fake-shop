import telebot
import dotenv
import os

#from aiocpa import CryptoPay
from database import *
from telebot import types
#from headers import *
from markups import *

dotenv.load_dotenv()
bot = telebot.TeleBot(os.getenv("BOT_TOKEN")) #str(os.getenv("BOT_TOKEN"))
#cp = CryptoPay(os.getenv("PAY_TOKEN")) #


@bot.message_handler(commands=["start"])
def start(message):
    setup_users()
    #print(message)
    if not check_us_register(message) and not message.from_user.is_bot:
        bot.send_message(message.chat.id,"üåø",reply_markup=types.ReplyKeyboardMarkup())
        bot.send_message(message.chat.id,"–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç Cloud9, –í—ã–±–µ—Ä–µ—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:",reply_markup=city_markup())
        bot.register_next_step_handler(message,setup_user)
        print(check_us_register(message))
    else:
        print(check_us_register(message))
        bot.send_message(message.chat.id,"üåø",reply_markup=types.ReplyKeyboardMarkup())
        bot.send_message(message.chat.id,"–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç Cloud9. –í—ã–±–µ—Ä–µ—Ç–µ –ø—É–Ω–∫—Ç –∏–∑ –º–µ–Ω—é: ",reply_markup=main_markup())
        #main(message)

def setup_user(message):
    if message.text in get_cytes():
        bot.delete_messages(message.chat.id,message_ids=[message.message_id,message.message_id-1,message.message_id-2])
        if not message.from_user.is_bot:
            bot.send_message(message.chat.id,"–í—ã–±–µ—Ä–µ—Ç–µ –≤–∞—à —Ä–∞–π–æ–Ω: ",reply_markup=rayon_murkup(message.text))
            bot.register_next_step_handler(message,setup_user1,message.text)
            #city = message.text
            
            #reg_user(message,city)
        #start(message)
    elif message.text == "/start":
        bot.delete_messages(message.chat.id,message_ids=[message.message_id,message.message_id-1,message.message_id-2])
        start(message)
    else:
        bot.delete_message(message.chat.id,message.message_id)
        bot.register_next_step_handler(message,setup_user)
    
def setup_user1(message,city):
    if not message.text in main_button:
        if message.text in get_rayons(city):
            try:
                reg_user(message,city,message.text)
                try:
                    bot.delete_messages(message.chat.id,[message.message_id,message.message_id-1])
                except:pass
            except Exception as e:
                print(e)
            start(message)
        else:
            bot.delete_message(message.chat.id,message.message_id)
            bot.register_next_step_handler(message,setup_user1)
    else:
        main_han(message)
def main(message):
    bot.send_message(message.chat.id,"–í—ã–±–µ—Ä–µ—Ç–µ –ø—É–Ω–∫—Ç –∏–∑ –º–µ–Ω—é: ",reply_markup=main_markup()) 

def update_us_city(message):
    if message.text in get_cytes():
        try:
            bot.send_message(message.chat.id,"–í—ã–±–µ—Ä–µ—Ç–µ –≤–∞—à —Ä–∞–π–æ–Ω: ",reply_markup=rayon_murkup(message.text))
            bot.register_next_step_handler(message,update_us_city1,message.text)
            
            #update_city(message,message.text)

            # bot.delete_messages(message.chat.id,message_ids=[message.message_id,message.message_id-1])
            # bot.send_message(message.chat.id,"–£—Å–ø–µ—à–Ω–æ",reply_markup=main_markup())
        except:
            bot.send_message(message.chat.id,"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫",reply_markup=main_markup())
        
    elif message.text == "/start":
        start(message)
    elif message.text == "–ù–∞–∑–∞–¥ ‚óÄ":
        bot.delete_message(message.chat.id,message.message_id)
        bot.delete_message(message.chat.id,message.message_id-1)
        main(message)
    else:
        bot.delete_message(message.chat.id,message.message_id)
        bot.register_next_step_handler(message,update_us_city) 

def update_us_city1(message,city):
    if message.text in get_rayons(city):
        try:
            update_city(message,city,message.text)
            bot.send_message(message.chat.id,"–£—Å–ø–µ—à–Ω–æ")
            try:
                bot.delete_messages(message.chat.id,[message.message_id,message.message_id-1,message.message_id-2,message.message_id-3])
            except Exception as e:print(e)
            main(message)
        except Exception as e:
            print(e)
            main(message)
    elif message.text == "/start":
        start(message)
    elif message.text == "–ù–∞–∑–∞–¥ ‚óÄ":
        bot.delete_message(message.chat.id,message.message_id)
        bot.delete_message(message.chat.id,message.message_id-1)
        main(message)
    else:
        bot.delete_message(message.chat.id,message.message_id)
        bot.register_next_step_handler(message,update_us_city) 

@bot.message_handler(func=lambda message: not message.text in main_button)

@bot.message_handler(func=lambda message: any(word in message.text for word in main_button))
def main_han(message):
    try:
        if check_us_register(message):
            match message.text:
                case "–ö–∞—Ç–∞–ª–æ–≥üóÉ":
                    bot.send_message(message.chat.id,"üóÇ",reply_markup=types.ReplyKeyboardMarkup())
                    bot.send_message(message.chat.id,"–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤:",reply_markup=produts_markup())
                case "–ì–æ—Ä–æ–¥üèô":
                    bot.reply_to(message,"–í—ã–±–µ—Ä–µ—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥: ",reply_markup = city_markup())
                    bot.register_next_step_handler(message,update_us_city)
                case "–†–∞–±–æ—Ç–∞ü•∑":
                    bot.send_message(message.chat.id,"–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ª—É—á—à–∏–µ —É—Å–ª–æ–≤–∏—è, –∏ –≤ –ª—é–±–æ–∏ —Å–ª—É—á–∞–µ –Ω–µ –≥—Ä–æ–∑–∏–º —Ä–∞—Å–ø—Ä–∞–≤–æ–π‚ù§Ô∏è\n–ü–∏—Å–∞—Ç—å —Å—é–¥–∞: @")
                case"–ü–æ–¥–¥–µ—Ä–∂–∫–∞üë®‚Äçüíª":
                    bot.send_message(message.chat.id,"–ê–∫–∫–∞—É–Ω—Ç —Ç–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫–∏: @")
                case "/start":
                    start(message)
                case _:
                    bot.delete_message(message.chat.id,message.message_id)
        else:
            try:
                start(message)
            except Exception as e:
                print(e)
    except:pass

@bot.callback_query_handler(func=lambda call:call.data.startswith("products"))
def product_handler(callback):
    id = callback.data.split("|")[1]
    id,name,price,unit_type,description,_ = get_products(id)
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∫–∞–∫ –∫—É–ø–∏—Ç—å –∫—Ä–∏–ø—Ç–æ-–≤–∞–ª—é—Ç—É",url="https://t.me/manualpokypkuwalytu"))
    markup.add(types.InlineKeyboardButton("–ö—É–ø–∏—Ç—å",callback_data=f"take_order|{id}"))
    markup.add(types.InlineKeyboardButton("<- –ù–∞–∑–∞–¥",callback_data=f"take_order|back"))
    bot.edit_message_text(f"<b>{name}: </b>\n <i>{description}</i>\n\n –¶–µ–Ω–∞: {price}‚ÇΩ/{unit_type}",callback.message.chat.id,callback.message.message_id,parse_mode="HTML",reply_markup=markup)

@bot.callback_query_handler(func=lambda call:call.data.startswith("take_order"))
def take_us_order(callback):
    product_id = callback.data.split("|")[1]
    if product_id == "back":
        bot.edit_message_text("–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤:",callback.message.chat.id,callback.message.message_id,reply_markup=produts_markup())
        return
    #id,name,price,unit_type,_,min_order = get_products(product_id)
    bot.edit_message_text("–í—ã–±–µ—Ä–µ—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã",callback.message.chat.id,callback.message.message_id,reply_markup=method_pay_markup(product_id))


@bot.callback_query_handler(func=lambda callback:callback.data.startswith("paymethod"))
def choice_paymethod(callback):
    met,product_id = callback.data.split("|")[1],callback.data.split("|")[2]
    # print(met,product_id)
    
    id,_,_,unit_type,_,min_order = get_products(product_id)
    try:
        bot.edit_message_text(f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø–æ–∫—É–ø–∫–∏(–≤ {unit_type})\n<b>–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø–æ–∫—É–ø–∫–∏</b>: {min_order}{unit_type}",callback.message.chat.id,callback.message.message_id,parse_mode="HTML")
    except:
        bot.send_message(callback.message.chat.id,f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø–æ–∫—É–ø–∫–∏(–≤ {unit_type})\n<b>–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø–æ–∫—É–ø–∫–∏</b>: {min_order}{unit_type}",parse_mode="HTML")
    bot.register_next_step_handler(callback.message,enter_quantity,id,min_order,met)
 
def enter_quantity(message,id,min_order,paymethod):
    #print(float(message.text))
    try:
        if not message.text in main_button:
            input_ =float(message.text)

            if not input_<min_order:
                _,_,price,_,_,min_order = get_products(id)
                match paymethod:
                    #case "CB":
                     #   try:
                      #      create_order(message,id,input_)
                       # except Exception as e:
                        #    if 'AMOUNT_TOO_BIG' in str(e):
                         #       bot.delete_message(message.chat.id,message.message_id)
                          #      bot.send_message(message.chat.id,"–°–ª–∏—à–∫–æ–º –æ–≥—Ä–æ–º–Ω–∞—è —Å—É–º–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º—É –ø–æ–º–µ–Ω—å—à–µ:")
                           #     bot.register_next_step_handler(message,enter_quantity,id,min_order,paymethod)
                    case "BK":
                        # print(get_cards())
                        text ="<b>üìé–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞—Ä—Ç: </b>\n\n"
                        for c_id,c,a in get_cards():
                            text += f"üí≥ {c_id} - <code>{c}</code>\n‚îîüá∑üá∫{a}\n\n"
                        text +=f"\n\n–°–∫–∏–Ω—å—Ç–µ –Ω–∞ –æ–¥–Ω—É –∏–∑ —ç—Ç–∏—Ö –∫–∞—Ä—Ç {input_ *price}‚ÇΩ –∏ –ø—Ä–∏—à–ª–∏—Ç–µ –≤ —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫—Éüë®‚Äçüíª —á–µ–∫ –æ–ø–ª–∞—Ç—ãüìÉ \n–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã —Ç–æ–≤–∞—Ä –±—É–¥—É—Ç –Ω–∞–ø—Ä–∞–≤–ª—è—Ç—Å—è –∫ –≤–∞–º"
                        bot.send_message(message.chat.id,text,parse_mode="HTML")
            else:
                bot.send_message(message.chat.id,f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ {min_order}! –í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑")
                bot.register_next_step_handler(message,enter_quantity,id,min_order,paymethod)
        else:
            main_han(message)
    
    except Exception as e:
        print(e)
        if not message.text in main_button:
            bot.delete_message(message.chat.id,message.message_id)
            bot.register_next_step_handler(message,enter_quantity,id,min_order,paymethod)

def create_order(message,product_id,quantity):
    try:
        _,name,price,unit_type,_,min_order = get_products(product_id)
        #invoice = cp.create_invoice(amount=price*quantity,currency_type="fiat",fiat="RUB",expires_in=180)#,fiat=True,description="–û–ø–ª–∞—Ç–∞ —Ç–æ–≤–∞—Ä–∞",)
        #markup = types.InlineKeyboardMarkup()
        #markup.add(types.InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å",url=invoice.pay_url))
        #markup.add(types.InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å",callback_data=f"invoice|check|{invoice.invoice_id}"))
        #markup.add(types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å",callback_data=f"invoice|delete|{invoice.invoice_id}"))
        #bot.send_message(message.chat.id,"–û–ø–ª–∞—Ç–∏—Ç–µ —Å—á–µ—Ç –∏ –≤ –±–ª–∏–∂–∞–π—à–µ–º –≤—Ä–µ–º–µ–Ω–∏ —Å–≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è —Ä–∞—Å–∫–∞–∂—É—Ç –≤—Å–µ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏",reply_markup=markup)
    except Exception as e:
        print("loh")
        print(e)
            

#@bot.callback_query_handler(func=lambda call:call.data.startswith("invoice"))
#def invoice_(callback):
#   data = callback.data.split("|")
#    _,met,invoice_id = data
#    if invoice_id:
#        match met:
#            case "check":
#                invoice = cp.get_invoices(invoice_ids=[invoice_id])[0]
#                match invoice.status:
#                    case "active":
#                        bot.send_message(callback.message.chat.id,"–í—ã –µ—â—ë –Ω–µ –æ–ø–ª–∞—Ç–∏–ª–∏!")
#                    case "paid":
#                        bot.edit_message_text("–í—ã —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—Ç–∏–ª–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–º –≤—Ä–µ–º–µ–Ω–∏ —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è",callback.message.chat.id,callback.message.message_id)
#                    case _:
#                        bot.edit_message_text("–°—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–¥–∞–ª–µ–Ω",callback.message.chat.id,callback.message.message_id)
#            case "delete":
#                try:
#                    cp.delete_invoice(invoice_id)
#                    bot.edit_message_text("–û—Ç–º–µ–Ω–µ–Ω–æ",callback.message.chat.id,callback.message.message_id)
#                except:
#                    bot.send_message(callback.message.chat.id,"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
#                    bot.delete_message(callback.message.chat.id,callback.message.message_id)
 #   else:
 #       bot.edit_message_text("–°—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–¥–∞–ª–µ–Ω",callback.message.chat.id,callback.message.message_id)
        

bot.infinity_polling()
